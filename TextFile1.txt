/*
* Copyright (c) 2024 Siccar (Registered co. Wallet.Services (Scotland) Ltd).
* All rights reserved.
*
* This file is part of a proprietary software product developed by Siccar.
*
* This source code is licensed under the Siccar Proprietary Limited Use License.
* Use, modification, and distribution of this software is subject to the terms
* and conditions of the license agreement. The full text of the license can be
* found in the LICENSE file or at https://github.com/siccar/SICCARV3/blob/main/LICENCE.txt.
*
* Unauthorized use, copying, modification, merger, publication, distribution,
* sublicensing, and/or sale of this software or any part thereof is strictly
* prohibited except as explicitly allowed by the license agreement.
*/

<div class="designer-icons">
    <ConnectorSymbols />
    <div class="logic-items">
        <SfTreeView TValue="LogicItem" AllowDragAndDrop="true" CssClass="parts" EnablePersistence="true">
            <TreeViewFieldsSettings TValue="LogicItem" Id="Id" DataSource="@LogicItems" Text="LogicType"></TreeViewFieldsSettings>
            <TreeViewEvents TValue="LogicItem" OnNodeDragStop="@((args) => OnLogicNodeDragged(args, LogicItems))"></TreeViewEvents>
            <TreeViewTemplates TValue="LogicItem">
                <NodeTemplate>
                    @{
                        var lg = ((context as LogicItem));
                        <div class="library-participant">
                            <div class="@lg.LogicIcon"></div>

                        </div>
                        <div>@lg.LogicType</div>
                    }
                </NodeTemplate>
            </TreeViewTemplates>
        </SfTreeView>
    </div>

</div>



OnNodeDragStop="@((args) => OnLogicNodeDragged(args, LogicItemList))"



 public async Task OnLogicNodeDragged(DragAndDropEventArgs arg, List<LogicItem> logicitems)
    {
        var gg = await JSRuntime.InvokeAsync<IDictionary<string, double>>("jsinteropfunction", new object[] { arg.Top, arg.Left });

        var logicitem = logicitems.Find(p => p.Id == arg.DraggedNodeData.Id);

        Dictionary<string, object> data = new Dictionary<string, object>();


        NodeCollection.Add(
        new DiagramNode()

        {

            OffsetY = gg["offsetY"],
            OffsetX = gg["offsetX"],
            Data = logicitem,
            MinHeight = 70,
            MinWidth = 70,
            Constraints = NodeConstraints.Default & ~NodeConstraints.Rotate,
            Shape = new DiagramShape()
            {

                Type = Shapes.HTML,
                Scale = Stretch.Stretch,

            }


        });
    }