<!-- /*
* Copyright (c) 2024 Siccar (Registered co. Wallet.Services (Scotland) Ltd).
* All rights reserved.
*
* This file is part of a proprietary software product developed by Siccar.
*
* This source code is licensed under the Siccar Proprietary Limited Use License.
* Use, modification, and distribution of this software is subject to the terms
* and conditions of the license agreement. The full text of the license can be
* found in the LICENSE file or at https://github.com/siccar/SICCARV3/blob/main/LICENCE.txt.
*
* Unauthorized use, copying, modification, merger, publication, distribution,
* sublicensing, and/or sale of this software or any part thereof is strictly
* prohibited except as explicitly allowed by the license agreement.
*/ -->

@inherits BaseControl
@inject IActionServiceClient actionServiceClient
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IAccessTokenProvider TokenProvider

<!-- A Layout Control which hosts subcontrols -->
@if (Submitted)
{
    @if (action.Id == 1)
    {
        if (ShowVerifiedData)
        {
            <div class="alert alert-info fs-5 mt-3" role="alert">
                <div class="row">
                    <div class="col-xs-12 col-xl-8">
                        <span class="fw-bold">Passport No.</span> @dataService.GetFormDataByKey("passportNumber")
                    </div>
                    @if (PendingNextAction is not null)
                    {
                        <div class="col-xs-12 col-xl-4 mt-xs-3">
                            <button type="button" class="btn-sm" @onclick="@(e => ContinueToNextAction())">Continue</button>
                        </div>
                    }
                </div>
            </div>

        }
        else
        {
            <div class="alert alert-info fs-5 mt-3" role="alert">
                <span>Your data is being verified by an external party. A passport number will then be generated.</span>
                <div class="spinner-border spinner-border-sm mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    }
    else if (action.Id == 6)
    {
        if (ShowVerifiedData)
        {
            <div class="alert alert-info fs-5 mt-3" role="alert">
                <div class="row">
                    <div class="col-xs-12 col-xl-8">
                        <span class="fw-bold">Vehicle Assurance No.</span> @dataService.GetFormDataByKey("assuranceReg")
                    </div>
                    <div class="col-xs-12 col-xl-4 mt-xs-3">
                        <button type="button" class="btn-sm" @onclick="@(e => ReturnToDashboard())">View Dashboard</button>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="alert alert-info fs-5 mt-3" role="alert">
                <span>Your data is being verified by an external party. A vehicle assurance number will then be generated.</span>
                <div class="spinner-border spinner-border-sm mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    }
    else if (IsComplete)
    {
        <div class="alert alert-info fs-5 mt-3" role="alert">
            <div class="row">
                <div class="col-xs-12 col-xl-8">
                    @if (action.Id == 10)
                    {
                        <span>The passport has been rejected</span>
                    }
                    else
                    {
                        <span>The passport has been successfully completed</span>
                    }
                </div>
                <div class="col-xs-12 col-xl-4 mt-xs-3">
                    <button type="button" class="btn-sm" @onclick="@(e => ReturnToDashboard())">View Dashboard</button>
                </div>
            </div>
        </div>
    }
    else
    {
        if (ShowVerifiedData)
        {
            <div class="alert alert-info fs-5 mt-3" role="alert">
                <div class="row">
                    <div class="col-xs-12 col-xl-8">
                        <span>The data you added has been sent successfully</span>
                    </div>
                    @if (action.Id == 7 || action.Id == 71)
                    {
                        <div class="col-xs-12 col-xl-4 mt-xs-3">
                            <button type="button" class="btn-sm" @onclick="@(e => ReturnToDashboard())">View Dashboard</button>
                        </div>
                    }
                    else if (PendingNextAction is not null)
                    {
                        <div class="col-xs-12 col-xl-4 mt-xs-3">
                            <button type="button" class="btn-sm" @onclick="@(e => ContinueToNextAction())">Continue</button>
                        </div>
                    }
                    else
                    {
                        <div class="col-xs-12 col-xl-4 mt-xs-3">
                            <button type="button" class="btn-sm" @onclick="@(e => ReturnToDashboard())">View Dashboard</button>
                        </div>
                    }
                </div>
            </div>

        }
        else
        {
            <div class="alert alert-info fs-5 mt-3" role="alert">
                <span>Your data is being saved and secured by Siccar.</span>
                <div class="spinner-border spinner-border-sm mx-2" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
    }
}
else
{
    @if (control.Layout == LayoutTypes.Group)
    {
        <form>
            <FormControl control="@control.Elements[CurrentElementIndex]" updateParentState="@updateParentState" />
        </form>
        <div class="navbuttons">
            <div>
                @if (CurrentElementIndex != 0)
                {
                    <button type="button" @onclick=PreviousElement>Back</button>

                }
            </div>
            <div>
                @if (IsLastElement(control.Elements.Count))
                {
                    if (RequiredMessage)
                    {
                        <p class="fs-6 mt-3"> <i class="fas fa-exclamation-circle fs-5 text-primary"></i> You must check the declaration to continue.</p>
                    }
                    <button type="button" @onclick="@(e => Submit())" disabled=@IsDisabled>Submit</button>
                    <p class="fs-6 mt-3"> <i class="fas fa-exclamation-circle fs-5 text-primary"></i> Clicking this button will send your data to a secure data register.  The data cannot be changed or edited.</p>
                }
                else
                {
                    <button type="button" @onclick="@(e => NextElement(control.Elements.Count))">Next</button>
                }
            </div>
        </div>
    }
    else
    {
        @if (control.Elements is not null)
        {
            @foreach (var item in control.Elements)
            {
                <FormControl control="@item" updateParentState="@updateParentState" />
            }

        }
        else
        {
            <b>No form elements defined.</b>
        }
    }
}

@code {
    public int CurrentElementIndex = 0;
    public bool Submitted = false;
    public bool ShowVerifiedData = false;
    public bool IsComplete = false;
    public bool RequiredMessage = false;
    public bool IsDisabled = false;
    public string AccessToken;
    public Siccar.Application.Action PendingNextAction;
    [Inject]
    public NavigationManager MyNavigationManager { get; set; }

    protected override void OnInitialized()
    {
        Submitted = false;
        base.OnInitialized();
    }

    private async Task Submit()
    {
        ShowVerifiedData = false;
        RequiredMessage = false;
        IsDisabled = true;
        Submitted = true;
        var formdata = dataService.GetFormDataByKey("declarationOfAcceptance");
        if (action.Id == 12 && (formdata.ToString() == "" || formdata.ToString() == "False"))
        {
            RequiredMessage = true;
            return;
        }
        var data = dataService.GetFormDataAsJson();

        var registerId = Configuration["RegisterId"];
        await GetAccessToken();
        var actionSubmission = new ActionSubmission
            {
                PreviousTxId = action.PreviousTxId,
                WalletAddress = WalletAddress,
                Data = data,
                RegisterId = registerId,
                BlueprintId = action.Blueprint
            };
        var tx = await actionServiceClient.Submission(actionSubmission);

        if (tx.MetaData.NextActionId < 0)
        {
            await InvokeAsync(RetrieveData);
            return;
        }

        var nextAction = await actionServiceClient.GetAction(WalletAddress, registerId, tx.TxId, AccessToken);


        if (tx.RecipientsWallets.First() == WalletAddress)
        {
            PendingNextAction = nextAction;
        }


        if (action.Id == 1 || action.Id == 6)
        {
            await InvokeAsync(RetrieveFakeData);
        }
        else
        {
            await InvokeAsync(RetrieveFakeData);
        }

    }

    private void ContinueToNextAction()
    {
        IsDisabled = false;
        dataService.ClearData();
        updateParentState.Invoke(PendingNextAction);
        PendingNextAction = null;
        CurrentElementIndex = 0;
        Submitted = false;
    }

    private void ReturnToDashboard()
    {
        //Return participant to their dashboard
        var uriString = MyNavigationManager.Uri;
        var uri = new Uri(uriString);
        string uriWithoutLastSegment = uri.AbsoluteUri.Remove(uri.AbsoluteUri.Length - (uri.Segments.Last().Length + uri.Segments[uri.Segments.Length - 2].Length));
        MyNavigationManager.NavigateTo(uriWithoutLastSegment);
    }

    private void RetrieveFakeData()
    {
        ShowVerifiedData = true;
        StateHasChanged();
    }

    private void RetrieveData()
    {
        ShowVerifiedData = true;
        IsComplete = true;
        StateHasChanged();
    }

    private void NextElement(int elementLength)
    {
        var lastIndex = elementLength - 1;
        CurrentElementIndex = lastIndex == CurrentElementIndex ? lastIndex : CurrentElementIndex + 1;

    }
    private void PreviousElement()
    {
        CurrentElementIndex = 0 == CurrentElementIndex ? 0 : CurrentElementIndex - 1;
    }

    private bool IsLastElement(int elementLength)
    {
        return CurrentElementIndex == elementLength - 1;
    }

    private async Task GetAccessToken()
    {
        var accessTokenResult = await TokenProvider.RequestAccessToken();
        AccessToken = string.Empty;

        if (accessTokenResult.TryGetToken(out var token))
        {
            AccessToken = token.Value;
        };
    }
}
