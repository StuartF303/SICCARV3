<!-- /*
* Copyright (c) 2024 Siccar (Registered co. Wallet.Services (Scotland) Ltd).
* All rights reserved.
*
* This file is part of a proprietary software product developed by Siccar.
*
* This source code is licensed under the Siccar Proprietary Limited Use License.
* Use, modification, and distribution of this software is subject to the terms
* and conditions of the license agreement. The full text of the license can be
* found in the LICENSE file or at https://github.com/siccar/SICCARV3/blob/main/LICENCE.txt.
*
* Unauthorized use, copying, modification, merger, publication, distribution,
* sublicensing, and/or sale of this software or any part thereof is strictly
* prohibited except as explicitly allowed by the license agreement.
*/ -->

@using System.Linq
@using System.IO
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.Extensions.Configuration;
@using Microsoft.Extensions.Logging
@using Siccar.Application.Models;
@using System.Net.Http;
@using System.Net.Http.Json;
@using Siccar.Common.ServiceClients;
@using System.Text.Json.Serialization;
@inherits BaseControl
@inject HttpClient Http
@inject ILogger<File> Logger
@inject IConfiguration Config
@inject IFileServiceClient FileServiceClient

<label for="@_id">
    @_label
</label>
<InputFile @key=@(inputFileId) id="file-input" disabled="@(files.Count == maxAllowedFiles)" OnChange="@OnInputFileChange" />
<p>
    @_description
</p>

@if (!uploading && files.Count > 0)
{
    <div class="card">
        <div class="card-body">
            <ul>
                @foreach (var file in files)
                {
                    <li>
                        <div class="file-data-row">
                            File: @file.Name
                            <br>
                            @if(FileUpload(uploadResults, file.Name, Logger,
                           out var result))
                            {
                                <div class="file-data-row-title">
                                    Stored File Name: @result.StoredFileName
                                    <div class="file-data-row-delete" @onclick="() => RemoveFile(result)">X</div>
                                </div>
                            }
                            else
                            {
                                <div class="file-data-row-title">
                                    There was an error uploading the file
                                    (Error: @result.ErrorReason).
                                    <div class="file-data-row-delete" @onclick="() => RemoveFile(result)">X</div>
                                </div>
                            }
                        </div>
                    </li>
                }
            </ul>
        </div>
    </div>
}

@code {
    private List<FileMetaData> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool uploading = false;
    private string inputFileId = Guid.NewGuid().ToString();

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        dataService.SetSubmissionState(true);

        long maxFileSize = 2097152;
        var upload = false;
        // Change file input key so that it clears the input.
        inputFileId = Guid.NewGuid().ToString();

        using var content = new MultipartFormDataContent();
        if (files.Count > 0) return;
        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var extension = Path.GetExtension(file.Name);
                    var contentType = String.IsNullOrEmpty(file.ContentType) ? "application/octet-stream" : file.ContentType;
                    files.Add(new() { Name = file.Name, Type = contentType, Size = file.Size, Extension = extension });

                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(contentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}",
                        file.Name, ex.Message);
                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                Uploaded = false,
                                ErrorReason = ex.Message
                            });
                }
            }
        }

        if (upload)
        {
            uploading = true;
            var newUploadResults = await FileServiceClient.UploadFile(content);
            uploading = false;
            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
                dataService.UpdateFormData(_id,
                    new FileMetaData
                        {
                            Name = uploadResults.First().StoredFileName,
                            Size = files[0].Size,
                            Type = files[0].Type,
                            Extension = files[0].Extension
                        });
            }
        }

        dataService.SetSubmissionState(false);
    }

    private bool FileUpload(IList<UploadResult> uploadResults,
        string fileName, ILogger<File> logger, out UploadResult result)
    {
        var fileResult = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!fileResult.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
        };

        result = fileResult;
        return result.Uploaded;
    }

    private async Task RemoveFile(UploadResult fileResult)
    {
        if (fileResult.Uploaded)
        {
            await FileServiceClient.RemoveFile(fileResult.StoredFileName);
        }
        uploadResults.Remove(fileResult);
        if (string.IsNullOrWhiteSpace(fileResult.FileName))
        {
            files.Clear();
        }
        else
        {
            files.Remove(files.SingleOrDefault(file => file.Name == fileResult.FileName));
        }
        StateHasChanged();
    }
}